{"version":3,"sources":["components/Statistics/Statistics.module.css","components/Section/Section.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Section","title","children","className","s","section","FeedbackOptions","options","onLeaveFeedback","map","option","type","button","onClick","Statistics","good","bad","neutral","total","positivePercentage","list","item","Notification","infoMessage","App","useState","setGood","setNeutral","setBad","countTotalFeedback","prevGood","prevNeutral","prevBad","Math","round","countPositiveFeedbackPercentage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,KAAO,yBAAyB,KAAO,2B,kBCAzDD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,yB,iBCA7DD,EAAOC,QAAU,CAAC,OAAS,kC,4ICgBZC,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,sBAAKC,UAAWC,IAAEC,QAAlB,UACGJ,GAAS,oBAAIE,UAAWC,IAAEH,MAAjB,SAAyBA,IAClCC,M,gBCaQI,MAjBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OACvB,wBACEC,KAAK,SAELR,UAAWC,IAAEQ,OACbC,QAAS,kBAAML,EAAgBE,IAJjC,SAMGA,GAJIA,O,gBCgBII,MApBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,IAAKC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,qBAAIhB,UAAWC,IAAEgB,KAAjB,UACE,qBAAIjB,UAAWC,IAAEiB,KAAjB,mBAA8BN,KAC9B,qBAAIZ,UAAWC,IAAEiB,KAAjB,sBAAiCJ,KACjC,qBAAId,UAAWC,IAAEiB,KAAjB,kBAA6BL,KAC7B,qBAAIb,UAAWC,IAAEiB,KAAjB,oBAA+BH,KAC/B,qBAAIf,UAAWC,IAAEiB,KAAjB,gCAA2CF,EAA3C,WCASG,MARf,YAAwC,IAAhBC,EAAe,EAAfA,YACtB,OAAO,4BAAIA,KCkHEC,MA9Gf,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNV,EADM,KACAW,EADA,OAEiBD,mBAAS,GAF1B,mBAENR,EAFM,KAEGU,EAFH,OAGSF,mBAAS,GAHlB,mBAGNT,EAHM,KAGDY,EAHC,KAqBPC,EAAqB,WACzB,OAAOd,EAAOC,EAAMC,GAQtB,OACE,qCACE,cAAC,EAAD,CAAShB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEM,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBA9Ba,SAAAE,GACnB,OAAQA,GACN,IAAK,OACHgB,GAAQ,SAAAI,GAAQ,OAAIA,EAAW,KAC/B,MACF,IAAK,UACHH,GAAW,SAAAI,GAAW,OAAIA,EAAc,KACxC,MACF,IAAK,MACHH,GAAO,SAAAI,GAAO,OAAIA,EAAU,KAC5B,MACF,QACE,aAsBF,eAAC,EAAD,CAAS/B,MAAM,aAAf,UACG4B,IAAuB,GACtB,cAAC,EAAD,CACEd,KAAMA,EACNE,QAASA,EACTD,IAAKA,EACLE,MAAOW,IACPV,mBArB8B,WACtC,IAAMD,EAAQW,IACd,OAAOX,EAAQe,KAAKC,MAAOnB,EAAOG,EAAS,KAAO,EAmBtBiB,KAGE,IAAzBN,KACC,cAAC,EAAD,CAAcN,YAAY,+BC7CrBa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9d8ff492.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__3oKT7\",\"item\":\"Statistics_item__1vE2T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__Ap5Zy\",\"title\":\"Section_title__2S6oE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__3n-hy\"};","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nfunction Section({ title, children }) {\n  return (\n    <div className={s.section}>\n      {title && <h2 className={s.title}>{title}</h2>}\n      {children}\n    </div>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\nimport s from './FeedbackOptions.module.css';\n\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\n  return options.map(option => (\n    <button\n      type=\"button\"\n      key={option}\n      className={s.button}\n      onClick={() => onLeaveFeedback(option)}\n    >\n      {option}\n    </button>\n  ));\n}\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\nimport s from './Statistics.module.css';\n\nfunction Statistics({ good, bad, neutral, total, positivePercentage }) {\n  return (\n    <ul className={s.list}>\n      <li className={s.item}>Good: {good}</li>\n      <li className={s.item}>Neutral: {neutral}</li>\n      <li className={s.item}>Bad: {bad}</li>\n      <li className={s.item}>Total: {total}</li>\n      <li className={s.item}>Positive feedback: {positivePercentage}%</li>\n    </ul>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import PropTypes from \"prop-types\";\n\nfunction Notification({ infoMessage }) {\n  return <p>{infoMessage}</p>;\n}\n\nNotification.propTypes = {\n  infoMessage: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import { useState } from 'react';\n\nimport Section from './components/Section';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistics from './components/Statistics';\nimport Notification from './components/Notification';\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const sendFeedback = option => {\n    switch (option) {\n      case 'good':\n        setGood(prevGood => prevGood + 1);\n        break;\n      case 'neutral':\n        setNeutral(prevNeutral => prevNeutral + 1);\n        break;\n      case 'bad':\n        setBad(prevBad => prevBad + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + bad + neutral;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const total = countTotalFeedback();\n    return total ? Math.round((good / total) * 100) : 0;\n  };\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={['good', 'neutral', 'bad']}\n          onLeaveFeedback={sendFeedback}\n        />\n      </Section>\n\n      <Section title=\"Statistics\">\n        {countTotalFeedback() > 0 && (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        )}\n        {countTotalFeedback() === 0 && (\n          <Notification infoMessage=\"No feedback given:(\" />\n        )}\n      </Section>\n    </>\n  );\n}\n\n// class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n//   sendFeedback = option => {\n//     this.setState(prevState => ({ [option]: prevState[option] + 1 }));\n//   };\n\n//   countTotalFeedback = () => {\n//     //return Object.values(this.state).reduce((acc, option) => acc + option, 0);\n\n//     const { good, bad, neutral } = this.state;\n//     return good + bad + neutral;\n//   };\n//   countPositiveFeedbackPercentage = () => {\n//     const { good } = this.state;\n//     const total = this.countTotalFeedback();\n//     //return Math.round((good / this.countTotalFeedback()) * 100) || 0;\n//     return total ? Math.round((good / total) * 100) : 0;\n//   };\n\n//   render() {\n//     const { good, bad, neutral } = this.state;\n//     const total = this.countTotalFeedback();\n//     const positivePercentage = this.countPositiveFeedbackPercentage();\n//     return (\n//       <>\n//         <Section title=\"Please leave feedback\">\n//           <FeedbackOptions\n//             options={Object.keys(this.state)}\n//             onLeaveFeedback={this.sendFeedback}\n//           />\n//         </Section>\n\n//         <Section title=\"Statistics\">\n//           {total > 0 && (\n//             <Statistics\n//               good={good}\n//               neutral={neutral}\n//               bad={bad}\n//               total={total}\n//               positivePercentage={positivePercentage}\n//             />\n//           )}\n//           {total === 0 && <Notification infoMessage=\"No feedback given:(\" />}\n//         </Section>\n//       </>\n//     );\n//   }\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}